settings
{
    modes
    {
    }
    heroes
    {
        General
        {
            Moira
            {
                Biotic Orb Max Damage Scalar: 200%
                Projectile Speed: 25%
            }
        }
    }
    extensions
    {
        Buff and Debuff Sounds
        Buff Status Effects
        Debuff Status Effects
        Energy Explosion Effects
        Explosion Sounds
    }
}

variables
{
    global:
        0: _arrayConstructor
    player:
        0: _extendedPlayerCollection
        1: dummyBot
}

// Extended collection variables:
// player [0]: overHealth
// player [1]: decay

rule("Create Overhealth(Secondary Fire)")
{

    event
    {
        Player Received Healing;
        All;
        All;
    }

    conditions
    {
        Event Ability == Button(Primary Fire);
        Not(Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 3)) == True;
        Hero Of(Healer) == Hero(Moira);
        Health(Event Player) == Max Health(Event Player);
    }

    // Action count: 17
    actions
    {
        Set Global Variable(_arrayConstructor, First Of(Player Variable(Event Player, _extendedPlayerCollection)));
        Set Global Variable At Index(_arrayConstructor, 4, Max Health Of Type(Event Player, Shields));
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, First Of(Player Variable(Event Player, _extendedPlayerCollection)));
        Set Global Variable At Index(_arrayConstructor, 3, True);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, First Of(Player Variable(Event Player, _extendedPlayerCollection)));
        Set Global Variable At Index(_arrayConstructor, 1, 5);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, First Of(Player Variable(Event Player, _extendedPlayerCollection)));
        Set Global Variable At Index(_arrayConstructor, 2, Total Time Elapsed);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Global Variable(_arrayConstructor));
        Add Health Pool To Player(Event Player, Shields, Multiply(Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 1), Subtract(1, If-Then-Else(Compare(Absolute Value(Divide(Multiply(Subtract(Total Time Elapsed, Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 2)), 10), 130)), <, 1), Divide(Multiply(Subtract(Total Time Elapsed, Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 2)), 10), 130), If-Then-Else(True, 1, -1)))), True, True);
        Set Global Variable(_arrayConstructor, First Of(Player Variable(Event Player, _extendedPlayerCollection)));
        Set Global Variable At Index(_arrayConstructor, 0, Last Created Health Pool);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Global Variable(_arrayConstructor));
        Heal(Event Player, Healer, 10);
    }
}

rule("Update Overhealth (Secondary Fire)")
{

    event
    {
        Player Received Healing;
        All;
        All;
    }

    conditions
    {
        Event Ability == Button(Primary Fire);
        Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 3) == True;
        Hero Of(Healer) == Hero(Moira);
        Health(Event Player) == Max Health(Event Player);
        Multiply(Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 1), Subtract(1, If-Then-Else(Compare(Absolute Value(Divide(Multiply(Subtract(Total Time Elapsed, Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 2)), 10), 130)), <, 1), Divide(Multiply(Subtract(Total Time Elapsed, Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 2)), 10), 130), If-Then-Else(True, 1, -1)))) < 100;
    }

    // Action count: 7
    actions
    {
        Set Global Variable(_arrayConstructor, First Of(Player Variable(Event Player, _extendedPlayerCollection)));
        Set Global Variable At Index(_arrayConstructor, 2, Total Time Elapsed);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, First Of(Player Variable(Event Player, _extendedPlayerCollection)));
        Modify Global Variable At Index(_arrayConstructor, 1, Add, 1.45);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Global Variable(_arrayConstructor));
        Set Player Health(Event Player, Max Health(Event Player));
    }
}

rule("Delete Health Pool")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 3) == True;
        If-Then-Else(Compare(Absolute Value(Divide(Multiply(Subtract(Total Time Elapsed, Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 2)), 10), 125)), <, 1), Divide(Multiply(Subtract(Total Time Elapsed, Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 2)), 10), 125), If-Then-Else(True, 1, -1)) == 1;
    }

    // Action count: 4
    actions
    {
        Remove Health Pool From Player(First Of(First Of(Player Variable(Event Player, _extendedPlayerCollection))));
        Set Global Variable(_arrayConstructor, First Of(Player Variable(Event Player, _extendedPlayerCollection)));
        Set Global Variable At Index(_arrayConstructor, 3, False);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Global Variable(_arrayConstructor));
    }
}

rule("Remove Health Pool")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Health Of Type(Event Player, Shields) <= Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 4);
        Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 3) == True;
    }

    // Action count: 4
    actions
    {
        Remove Health Pool From Player(First Of(First Of(Player Variable(Event Player, _extendedPlayerCollection))));
        Set Global Variable(_arrayConstructor, First Of(Player Variable(Event Player, _extendedPlayerCollection)));
        Set Global Variable At Index(_arrayConstructor, 3, False);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Global Variable(_arrayConstructor));
    }
}

rule("Non-regen Health Pool")
{

    event
    {
        Player took damage;
        All;
        All;
    }

    conditions
    {
        Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 3) == True;
        Health Of Type(Event Player, Shields) < Max Health Of Type(Event Player, Shields);
    }

    // Action count: 3
    actions
    {
        Set Global Variable(_arrayConstructor, First Of(Player Variable(Event Player, _extendedPlayerCollection)));
        Set Global Variable At Index(_arrayConstructor, 1, Subtract(Health Of Type(Event Player, Shields), Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 4)));
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Global Variable(_arrayConstructor));
    }
}

rule("Limit HP")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 3) == True;
        Value In Array(First Of(Player Variable(Event Player, _extendedPlayerCollection)), 1) > 100;
    }

    // Action count: 3
    actions
    {
        Set Global Variable(_arrayConstructor, First Of(Player Variable(Event Player, _extendedPlayerCollection)));
        Set Global Variable At Index(_arrayConstructor, 1, 100);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Global Variable(_arrayConstructor));
    }
}

rule("Reset")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Button(Interact)) == True;
    }

    // Action count: 13
    actions
    {
        If(Compare(Player Variable(Event Player, dummyBot), ==, Null));
            Create Dummy Bot(Hero(Roadhog), Team Of(Event Player), -1, Position Of(Event Player), Facing Direction Of(Event Player));
            Set Player Variable(Event Player, dummyBot, Last Created Entity);
            Wait(0.5, Ignore Condition);
        End;
        Damage(Player Variable(Event Player, dummyBot), Null, 100);
        Set Status(Player Variable(Event Player, dummyBot), Null, Knocked Down, 100);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1));
        Set Global Variable At Index(_arrayConstructor, 1, Add(Total Time Elapsed, 2));
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 1, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1));
        Set Global Variable At Index(_arrayConstructor, 2, True);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 1, Global Variable(_arrayConstructor));
    }
}

rule("Deplete resource")
{

    event
    {
        Player Dealt Healing;
        All;
        All;
    }

    conditions
    {
        Hero Of(Healer) == Hero(Moira);
        Event Ability == Button(Ability 2);
    }

    // Action count: 1
    actions
    {
        Set Ability Resource(Event Player, Button(Primary Fire), Subtract(Ability Resource(Event Player, Button(Primary Fire)), 2.35));
    }
}

rule("Gain Resource")
{

    event
    {
        Player dealt damage;
        All;
        All;
    }

    conditions
    {
        Hero Of(Event Player) == Hero(Moira);
        Event Ability == Button(Ability 2);
    }

    // Action count: 1
    actions
    {
        Set Ability Resource(Event Player, Button(Primary Fire), Add(Ability Resource(Event Player, Button(Primary Fire)), 1.85));
    }
}

rule("Clear 3 Status")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Count Of(Filtered Array(All Players(Team Of(Event Player)), And(And(Is Using Ability 1(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Moira))), Compare(Distance Between(Position Of(Event Player), Position Of(Current Array Element)), <=, 2.25)))) != 0;
        Has Status(Event Player, Stunned) == True;
    }

    // Action count: 1
    actions
    {
        Clear Status(Event Player, Stunned);
    }
}

rule("Clear 3 Status")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Count Of(Filtered Array(All Players(Team Of(Event Player)), And(And(Is Using Ability 1(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Moira))), Compare(Distance Between(Position Of(Event Player), Position Of(Current Array Element)), <=, 2.25)))) != 0;
        Has Status(Event Player, Rooted) == True;
    }

    // Action count: 1
    actions
    {
        Clear Status(Event Player, Rooted);
    }
}

rule("Clear 3 Status")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Count Of(Filtered Array(All Players(Team Of(Event Player)), And(And(Is Using Ability 1(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Moira))), Compare(Distance Between(Position Of(Event Player), Position Of(Current Array Element)), <=, 2.25)))) != 0;
        Has Status(Event Player, Asleep) == True;
    }

    // Action count: 1
    actions
    {
        Clear Status(Event Player, Asleep);
    }
}

rule("Clear 3 Status")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Count Of(Filtered Array(All Players(Team Of(Event Player)), And(And(Is Using Ability 1(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Moira))), Compare(Distance Between(Position Of(Event Player), Position Of(Current Array Element)), <=, 2.25)))) != 0;
        Has Status(Event Player, Hacked) == True;
    }

    // Action count: 1
    actions
    {
        Clear Status(Event Player, Hacked);
    }
}

rule("Clear 3 Status")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Count Of(Filtered Array(All Players(Team Of(Event Player)), And(And(Is Using Ability 1(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Moira))), Compare(Distance Between(Position Of(Event Player), Position Of(Current Array Element)), <=, 2.25)))) != 0;
        Has Status(Event Player, Knocked Down) == True;
    }

    // Action count: 3
    actions
    {
        Clear Status(Event Player, Knocked Down);
        Play Effect(All Players(Team(All)), Moira Fade Disappear Sound, Color(White), Position Of(Event Player), 5);
        Play Effect(All Players(Team(All)), Moira Fade Disappear Effect, Color(White), Event Player, 5);
    }
}

rule("Clear 3 Status")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Count Of(Filtered Array(All Players(Team Of(Event Player)), And(And(Is Using Ability 1(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Moira))), Compare(Distance Between(Position Of(Event Player), Position Of(Current Array Element)), <=, 2.25)))) != 0;
        Has Status(Event Player, Burning) == True;
    }

    // Action count: 1
    actions
    {
        Clear Status(Event Player, Burning);
    }
}

rule("Clear 3 Status")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Count Of(Filtered Array(All Players(Team Of(Event Player)), And(And(Is Using Ability 1(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Moira))), Compare(Distance Between(Position Of(Event Player), Position Of(Current Array Element)), <=, 2.25)))) != 0;
        Has Status(Event Player, Frozen) == True;
    }

    // Action count: 1
    actions
    {
        Clear Status(Event Player, Frozen);
    }
}

rule("Clear 3 Status")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Count Of(Filtered Array(All Players(Team Of(Event Player)), And(And(Is Using Ability 1(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Moira))), Compare(Distance Between(Position Of(Event Player), Position Of(Current Array Element)), <=, 2.25)))) != 0;
        Has Status(Event Player, Knocked Down) == True;
    }

    // Action count: 1
    actions
    {
        Clear Status(Event Player, Knocked Down);
    }
}

rule("Moira Decay Orb")
{

    event
    {
        Player dealt damage;
        All;
        All;
    }

    conditions
    {
        Hero Of(Event Player) == Hero(Moira);
        Event Ability == Button(Ability 2);
    }

    // Action count: 7
    actions
    {
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Victim, _extendedPlayerCollection), 1));
        Set Global Variable At Index(_arrayConstructor, 1, Add(Total Time Elapsed, 4));
        Set Player Variable At Index(Victim, _extendedPlayerCollection, 1, Global Variable(_arrayConstructor));
        Set Player Health(Victim, Add(Health(Victim), Multiply(Event Damage, 0.93)));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Victim, _extendedPlayerCollection), 1));
        Set Global Variable At Index(_arrayConstructor, 2, True);
        Set Player Variable At Index(Victim, _extendedPlayerCollection, 1, Global Variable(_arrayConstructor));
    }
}

rule("Decay On")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1), 2) == True;
    }

    // Action count: 10
    actions
    {
        Set Move Speed(Event Player, 85);
        Set Damage Received(Event Player, 115);
        Create Effect(All Players(Team(All)), Reaper Wraith Form Effect, Color(Team 1), Event Player, 1, Visible To);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1));
        Set Global Variable At Index(_arrayConstructor, 3, Last Created Entity);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 1, Global Variable(_arrayConstructor));
        Create Effect(Event Player, Zenyatta Orb Of Discord Target Sound, Color(White), Eye Position(Event Player), 50, Visible To Position Radius and Color);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1));
        Set Global Variable At Index(_arrayConstructor, 4, Last Created Entity);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 1, Global Variable(_arrayConstructor));
    }
}

rule("Decay Off")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1), 1) < Total Time Elapsed;
        Value In Array(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1), 2) == True;
    }

    // Action count: 7
    actions
    {
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1));
        Set Global Variable At Index(_arrayConstructor, 2, False);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 1, Global Variable(_arrayConstructor));
        Set Move Speed(Event Player, 100);
        Set Damage Received(Event Player, 100);
        Destroy Effect(Value In Array(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1), 3));
        Destroy Effect(Value In Array(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1), 4));
    }
}

